{
	"compiler": {
		"version": "0.8.23+commit.f704f362"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "ProposalRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "VoteEquality",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "Voted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "voterAddress",
						"type": "address"
					}
				],
				"name": "VoterRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "enum VotingPlus.WorkflowStatus",
						"name": "previousStatus",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "enum VotingPlus.WorkflowStatus",
						"name": "newStatus",
						"type": "uint8"
					}
				],
				"name": "WorkflowStatusChange",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_description",
						"type": "string"
					}
				],
				"name": "addProposal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "addVoter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_delegate",
						"type": "address"
					}
				],
				"name": "delegateVote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentVoteStep",
				"outputs": [
					{
						"internalType": "enum VotingPlus.WorkflowStatus",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWinner",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "listProposals",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "voteCount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "lastVoteTimestamp",
								"type": "uint256"
							}
						],
						"internalType": "struct VotingPlus.Proposal[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextVoteStep",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "restartVoteFromScratch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "solveEqualityWithTimestamp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "solveEqualityWithVote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tailVotes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "voteCount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "lastVoteTimestamp",
								"type": "uint256"
							}
						],
						"internalType": "struct VotingPlus.Proposal[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_proposalId",
						"type": "uint256"
					}
				],
				"name": "voteForProposition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Maxime AUBURTIN",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"addProposal(string)": {
					"params": {
						"_description": "The content of the proposition to be voted"
					}
				},
				"delegateVote(address)": {
					"params": {
						"_delegate": "The adresse to delegate the vote to"
					}
				},
				"listProposals()": {
					"returns": {
						"_0": "An array of proposals"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"voteForProposition(uint256)": {
					"params": {
						"_proposalId": "The if of the proposition to vote for"
					}
				}
			},
			"title": "Voting contrat: this contract allow a whitelist of voters to vote for their favorite proposition.",
			"version": 1
		},
		"userdoc": {
			"events": {
				"VoterRegistered(address)": {
					"notice": "Events"
				}
			},
			"kind": "user",
			"methods": {
				"addProposal(string)": {
					"notice": "This method allows to create a new proposition"
				},
				"addVoter(address)": {
					"notice": "this external addVoter function allows to add a new voter to the whitelist"
				},
				"constructor": {
					"notice": "=================================================================================================================================================================== Smart Contract methods***================================================================================================================================================================="
				},
				"delegateVote(address)": {
					"notice": "This method allows a voter to delegate its vote to an existing or to a new voter"
				},
				"getCurrentVoteStep()": {
					"notice": "Returns the current step of the state machine"
				},
				"getWinner()": {
					"notice": "This method returns the winning proposition once votes have been tallied and equality issues solved"
				},
				"listProposals()": {
					"notice": "This method allows to list all registered propositions"
				},
				"nextVoteStep()": {
					"notice": "Move the state machine to its next state if constraints brought by modifiers are fullfilled"
				},
				"restartVoteFromScratch()": {
					"notice": "This method allows to restart the whole voting session once votes are tallied"
				},
				"solveEqualityWithTimestamp()": {
					"notice": "This method will solve a situtation of equality between proposals by looking for the oldest voted proposition.           It is this one which will be designated as the winner and its id stored in winningProposalId"
				},
				"solveEqualityWithVote()": {
					"notice": "This method will solve a situation of equality between proposals by creating a voting session only for these            propositions which got the same number of votes. Vote will take the same shape until there is one unique winner."
				},
				"tailVotes()": {
					"notice": "This method will tail the Votes and return an array containing one or more winners. In case there is only one winner           its id will be recorded as the winning proposition in winningProposalId which can be retrieved through the getWinner           function."
				},
				"voteForProposition(uint256)": {
					"notice": "This method allows to vote for a proposition by its id"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"VotingPlus.sol": "VotingPlus"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"VotingPlus.sol": {
			"keccak256": "0x7c1db65b7c64868b210a495b9047d510968e9e20c8f17ee0e8c062930f7d1e41",
			"license": "MIT",
			"urls": [
				"bzz-raw://1e8dc281023ad736367ecf2bf6abff64088fb2f8884241845c967190b0afb33f",
				"dweb:/ipfs/QmdSqtJPrMKxLuMHWuG714JWFU71deFCLzJsgwh5u3zuGd"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
			"keccak256": "0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3",
			"license": "MIT",
			"urls": [
				"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867",
				"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY"
			]
		}
	},
	"version": 1
}